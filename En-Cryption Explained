ENCRYPTION EXPLAINED

The Sha-512  hash function is a function that takes input of a variable length sequence of bytes and converts it to a fixed length 
sequence. It is a one way function. Most of the time a hash function will produce unique output for a given input.
The random number generator using the import random will generate a different random number between 0 and 1 each time: random.random()
But if you 'seed' the random number as follows random.seed('123'). it will output the same random number each time. We seed the random 
number with the 'salt' variable.

The makeSalt(salt) function, seeds the random number generator,  creates a hashlib.sha512() object,
and updates that object with a bytearray of that random number, and the result is returned.

The key_for_acc_pass(masterPassword) function, takes the master password plus the result of the above makeSalt(salt) stored in gsalt 
variable and after creating a bytearray of both master password and gsalt, updates the hashlib.sha512() object first with the master 
password bytearray, and next with the gsalt bytearray. Therefore, the update of the hashlib.sha512() object is a combination of both 
master password plus the gsalt to arrive at an encryption/decryption "key". Knowledge of both master password and gsalt are required to 
successfully re-create the correct "key".

The encrypt_it(plain_text, encryption_decryption_key) function takes the plain text password and the above encryption/decryption "key",
creates a bytearray of both and XOR's each element of the 2 bytearrays and stores the result in a new bytearray which is the XOR result. 
This result is then converted to a Base-64 encoding since this is a way of taking binary data and turning it into text so that
 it's more easily transmitted in things like e-mail and HTML form data. And it is this result that is stored in the database.

The decrypt_it(get_key, cipher_text_ba_b64_str) function takes the stored Base-64 value from the above function and this is the 
cipher_text_ba_b64_str parameter,  and re-creates the encryption/decryption "key" from the key_for_acc_pass(masterPassword) function and 
this is the get_key parameter value. So the "key " is re-created again from another "enter master password" prompt. Of course the key will 
be correct only if the master password input is correct.
Next bytearrays are created from both the key and the base-64 string and the XOR is performed on each element of the key and the base-64
string. The result is output and returned. 
Only the correct input of master password will result in a correct text being returned.

This is the essence of the En-Cryption program.
I have attached both the essence of the En-Cryption Python as well as the essence of the En-Cryption JavaScript files for viewing.
Hope this was informative!


